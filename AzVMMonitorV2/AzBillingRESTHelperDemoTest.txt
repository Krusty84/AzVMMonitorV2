 //тест демо
        /// <summary>
        /// The DemoDummyTest.
        /// </summary>
        /// <param name="subscriptionid">The SubscriptionID<see cref="string"/>.</param>
        /// <param name="vmname">The VmName<see cref="string"/>.</param>
        /// <param name="groupname">The GroupName<see cref="string"/>.</param>
        /// <returns>The <see cref="string"/>.</returns>
        public static string DemoDummyTest(string subscriptionid, string vmname, string groupname)
        {
            //string requestCostByVM2 = "{\"type\":\"ActualCost\",\"dataSet\":{\"granularity\":\"None\",\"aggregation\":{\"totalCost\":{\"name\":\"Cost\",\"function\":\"Sum\"},\"totalCostUSD\":{\"name\":\"CostUSD\",\"function\":\"Sum\"}},\"grouping\":[{\"type\":\"Dimension\",\"name\":\"ResourceId\"},{\"type\":\"Dimension\",\"name\":\"ResourceType\"},{\"type\":\"Dimension\",\"name\":\"ResourceLocation\"},{\"type\":\"Dimension\",\"name\":\"ChargeType\"},{\"type\":\"Dimension\",\"name\":\"ResourceGroupName\"},{\"type\":\"Dimension\",\"name\":\"PublisherType\"},{\"type\":\"Dimension\",\"name\":\"ServiceName\"},{\"type\":\"Dimension\",\"name\":\"ServiceTier\"},{\"type\":\"Dimension\",\"name\":\"Meter\"}],\"include\":[\"Tags\"],\"filter\":{\"And\":[{\"Dimensions\":{\"Name\":\"PublisherType\",\"Operator\":\"In\",\"Values\":[\"azure\"]}},{\"Dimensions\":{\"Name\":\"ServiceName\",\"Operator\":\"In\",\"Values\":[\"virtual machines\"]}},{\"Dimensions\":{\"Name\":\"ResourceId\",\"Operator\":\"In\",\"Values\":[\"\\/subscriptions\\/bda49470-cd24-4739-b0c8-847628b2b149\\/resourcegroups\\/group4freevms\\/providers\\/microsoft.compute\\/virtualmachines\\/vmnumber1\"]}},{\"Dimensions\":{\"Name\":\"BillingPeriod\",\"Operator\":\"In\",\"Values\":[\"202109(2021-08-14 - 2021-09-13)\"]}}]}}}";

            string requestCostByVM = "{\"type\":\"ActualCost\",\"dataSet\":{\"granularity\":\"None\",\"aggregation\":{\"totalCost\":{\"name\":\"Cost\",\"function\":\"Sum\"},\"totalCostUSD\":{\"name\":\"CostUSD\",\"function\":\"Sum\"}},\"grouping\":[{\"type\":\"Dimension\",\"name\":\"ResourceId\"},{\"type\":\"Dimension\",\"name\":\"ResourceType\"},{\"type\":\"Dimension\",\"name\":\"ResourceLocation\"},{\"type\":\"Dimension\",\"name\":\"ChargeType\"},{\"type\":\"Dimension\",\"name\":\"ResourceGroupName\"},{\"type\":\"Dimension\",\"name\":\"PublisherType\"},{\"type\":\"Dimension\",\"name\":\"ServiceName\"},{\"type\":\"Dimension\",\"name\":\"ServiceTier\"},{\"type\":\"Dimension\",\"name\":\"Meter\"}],\"include\":[\"Tags\"],\"filter\":{\"And\":[{\"Dimensions\":{\"Name\":\"PublisherType\",\"Operator\":\"In\",\"Values\":[\"azure\"]}},{\"Dimensions\":{\"Name\":\"ServiceName\",\"Operator\":\"In\",\"Values\":[\"virtual machines\"]}},{\"Dimensions\":{\"Name\":\"ResourceId\",\"Operator\":\"In\",\"Values\":[\"\\/subscriptions\\/SubscriptionID\\/resourcegroups\\/GroupsName\\/providers\\/microsoft.compute\\/virtualmachines\\/VmName\"]}},{\"Dimensions\":{\"Name\":\"BillingPeriod\",\"Operator\":\"In\",\"Values\":[\"202109(2021-08-14 - 2021-09-13)\"]}}]}}}";

            string firstTransformation = requestCostByVM.Replace("SubscriptionID", subscriptionid);
            string secondTransformation = firstTransformation.ToString().Replace("GroupsName", groupname.ToLower());
            string finalTransformation = secondTransformation.ToString().Replace("VmName", vmname.ToLower());
            //string details = JObject.Parse(finalTransformation);
            var payload = finalTransformation;
            return payload;
        }

        //тест демо
        /// <summary>
        /// The DemoDummyTest2.
        /// </summary>
        /// <param name="accesstoken">The AccessToken<see cref="string"/>.</param>
        /// <param name="subscriptionid">The SubscriptionID<see cref="string"/>.</param>
        /// <param name="method">The method<see cref="string"/>.</param>
        /// <returns>The <see cref="Task"/>.</returns>
        public static async Task DemoDummyTest2(string accesstoken, string subscriptionid, string method)
        {
            string response = "";
            HttpClient client = new HttpClient();

            client.BaseAddress = new Uri("https://management.azure.com/subscriptions/" + subscriptionid + "/providers/Microsoft.CostManagement/query?api-version=2019-11-01");
            client.DefaultRequestHeaders.Accept.Clear();

            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + accesstoken);

            if (method == "GET")
            {
                HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, client.BaseAddress);
                response = await MakeRequestAsync(request, client);
            }
            else if (method == "POST")
            {
                //получить конечную сумму
                var payload = CostManagementQuery.requestByTagPayload;
                HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, client.BaseAddress);

                request.Content = new StringContent(payload, Encoding.UTF8, "application/json");
                response = await PostRequestAsync(request, client);
            }

            AzureDetails.Response = response;
        }